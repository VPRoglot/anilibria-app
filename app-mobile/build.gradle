import java.text.DateFormat
import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


static def getDateTime() {
    DateFormat df = new SimpleDateFormat("dd MMMMM yyyy")
    return df.format(new Date()) + " г."
}

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "ru.radiationx.anilibria"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 60
        versionName "2.6.0"
        buildConfigField "String", 'BUILD_DATE', '"' + getDateTime() + '"'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    androidExtensions {
        experimental = true
    }

    // Поиграться в случае "Unable to load publicsuffixes.gz resource from the classpath."
   /* packagingOptions {
        pickFirst  'META-INF/*'
        doNotStrip "okhttp3/internal/publicsuffix/publicsuffixes.gz"
    }*/

    /*sourceSets {
        main {
            resources.srcDirs = ['src/main/resources', 'src/main/resources/okhttp3/internal/publicsuffix']
        }
    }*/

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "wtf"
    productFlavors {
        /*
        * Для приложений в сторе нужно добавить id аппки в
        * ru.radiationx.anilibria.model.data.remote.Api
        * */
        stable {
            dimension "wtf"
        }
        app {
            dimension "wtf"
            applicationIdSuffix ".app"
        }
        appDev{
            dimension "wtf"
            multiDexEnabled true
            applicationIdSuffix ".app"
        }
        store {
            dimension "wtf"
            applicationId 'tv.anilibria.store'
            multiDexEnabled true
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        disable 'RestrictedApi'
        checkReleaseBuilds false
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appName = "AniLibria"
            def versionName = variant.versionName
            outputFileName = "${appName}_v${versionName}.apk"
        }
    }
}
ext {
    supportLibVersion = '28.0.0'
    okHttpVersion = '3.12.3'
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    implementation project(":data")
    implementation project(":shared-android-ktx")
    implementation project(":shared-app")

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.2.0-alpha04'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.1.0'

    implementation "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${okHttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"

    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation "com.jakewharton.rxrelay2:rxrelay:2.1.0"

    implementation "com.github.moxy-community:moxy:2.1.1"
    implementation 'com.github.moxy-community:moxy-androidx:2.1.1'
    kapt 'com.github.moxy-community:moxy-compiler:2.1.1'

    implementation 'ru.terrakok.cicerone:cicerone:5.0.0'

    implementation 'com.github.Cutta:TagView:1.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //implementation 'com.lapism:searchview:4.0'
    //implementation 'com.lapism:search:1.0.0'
    implementation project(":lapism-search")

    implementation 'com.google.android:flexbox:1.1.0'

    implementation 'com.devbrackets.android:exomedia:4.3.0'

    implementation 'org.bsc.util:minitemplator-repackaged:1.2'

    implementation 'com.hannesdorfmann:adapterdelegates4:4.3.0'

    implementation 'de.hdodenhof:circleimageview:3.0.0'

    /*compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }*/

    implementation("com.github.permissions-dispatcher:permissionsdispatcher:4.9.1")
    kapt "com.github.permissions-dispatcher:permissionsdispatcher-processor:4.9.1"

    implementation 'me.zhanghai.android.materialprogressbar:library:1.4.2'

    implementation 'com.nightlynexus.viewstatepageradapter:viewstatepageradapter:1.0.4'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation project(":bottomsheet")
/*
    implementation 'org.michaelbel:bottomsheet:1.2.3'*/

    implementation "com.github.stephanenicolas.toothpick:smoothie-androidx:3.1.0"
    implementation "com.github.stephanenicolas.toothpick:smoothie-lifecycle-ktp:3.1.0"
    implementation "com.github.stephanenicolas.toothpick:smoothie-lifecycle-viewmodel-ktp:3.1.0"
    implementation "com.github.stephanenicolas.toothpick:ktp:3.1.0"
    kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:3.1.0"

    implementation 'at.blogc:expandabletextview:1.0.5'

    implementation 'com.github.stealthcopter:AndroidNetworkTools:0.4.3'


    implementation 'com.google.firebase:firebase-messaging:18.0.0'
    implementation 'com.google.firebase:firebase-core:16.0.9'
}

apply plugin: 'com.google.gms.google-services'